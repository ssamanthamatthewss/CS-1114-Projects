

user_current_xp = float(input("Enter this user's current XP: "))
if user_current_xp < 18:
	print("Level 1 Player (XP:", user_current_xp,")" )
elif 18 > user_current_xp >= 24.9:
	print("Level 2 Player (XP:", user_current_xp,")")
elif 25 > user_current_xp >= 29.9:
	print("Level 3 Player (XP:", user_current_xp,")")
elif 30 > user_current_xp >= 39.9:
	print("Level 4 Player (XP:", user_current_xp,")")
elif 40 >= user_current_xp >= 50:
	print("Level 5 Player (XP:", user_current_xp,")")


import random
random_value = random.randint(0,255)
user_pokemon_level = int(input("What is this Pokémon's level?: "))
user_pokemon_speed = int(input("What is this Pokémon's speed?: "))
threshold_formula = user_pokemon_speed / 2
damage_multiplier_formula = (2 * user_pokemon_level + 6 / (user_pokemon_level + 6))
damage_multiplier_formula = round(damage_multiplier_formula, 2)
if threshold_formula > random_value:
	print("The Pokemon's move will be", str(damage_multiplier_formula)+"x stronger!")
else:
	# Not a critical hit
	print("Not a critical hit!")


 user_day = input("Enter the day the call started at:")
user_time_start = int(input("Enter the time the call started at (hhmm):"))
user_duration = int(input("Enter the duration of the call (in minutes):"))
early_bound = 500
# EARLY BOUND IS 5 AM
later_bound = 2100
# LATER BOUND IS 9 PM

if user_day == "Sat" or user_day == "Sun" or user_day == "Fri":
    cost_1 = user_duration * 0.10
    print("This call will cost $", cost_1)
elif user_time_start >= early_bound and user_time_start <= later_bound:
    cost2 = user_duration * 0.55
    print("This call will cost $", cost2)
elif user_time_start < early_bound or user_time_start > later_bound:
    cost_3 = user_duration * 0.35
    print("This call will cost $", round(cost_3,1))

import math

a = float(input("Please enter value of a:"))
b = float(input("Please enter value of b:"))
c = float(input("Please enter value of c:"))
quadratic_formula_positive = ((-1 * b) + math.sqrt((b ** 2) - (4 * a * c))) // (2 * a)
quadratic_formula_negative = ((-1 * b) - math.sqrt((b ** 2) - (4 * a * c))) // (2 * a)
if a == b == c:
    print("This equation has an infinite number of solutions")
elif a == 0:
    print("This equation has no solutions")
elif b == 0:
    print("This equation has no real solutions")
elif quadratic_formula_positive == quadratic_formula_negative:
    print("This equation has 1 solution: x =", quadratic_formula_positive)
else:
    print("This equation has 2 solutions: x =", quadratic_formula_positive,  "and x=",quadratic_formula_negative)

user_side_1 = float(input("Length of the first side:"))
user_side_2 = float(input("Length of the second side:"))
user_side_3 = float(input("Length of the third side:"))
pythagorean_check = user_side_1 ** 2 + user_side_2 ** 2 == user_side_3 ** 2
if user_side_1 != user_side_2 != user_side_3:
	print(user_side_1, ",", user_side_2, ",", user_side_3, "form a scalene triangle")
elif user_side_1 == user_side_2 == user_side_3:
	print(user_side_1, ",", user_side_2, ",", user_side_3, "form an equilateral triangle")
elif pythagorean_check == True:
	print(user_side_1, ",", user_side_2, ",", user_side_3, "form an isosceles right triangle")
elif pythagorean_check == False:
	print(user_side_1, ",", user_side_2, ",", user_side_3, "form an isosceles triangle that is not a right triangle")


    
